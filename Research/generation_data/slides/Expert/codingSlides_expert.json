{
    "slides": [
        {
            "Title": "Natural Language Processing",
            "Description": "Professor John Licato University of South Florida Chapter 2:RegEx, Edit Distance",
            "Latex": []
        },
        {
            "Title": "Regular Expressions",
            "Description": "Knowing [regular expressions] can mean the difference between solving a problem in 3 steps and solving it in 3,000 steps. When you're a nerd, you forget that the problems you solve with a couple keystrokes can take other people days of tedious, error-prone work to slog through.",
            "Latex": []
        },
        {
            "Title": "Regular Expressions",
            "Description": "The following function called `isPhoneNumber(text)` is designed to check if the provided string is a phone number in a specific format using regex. def isPhoneNumber(text):    if len(text) != 12:        return False    for i in range(0, 3):        if not text[i].isdecimal():            return False    if text[3] != '-':        return False    for i in range(4, 7):        if not text[i].isdecimal():            return False    if text[7] != '-':        return False    for i in range(8, 12):        if not text[i].isdecimal():            return False    return Trueprint('415-555-4242 is a phone number:')print(isPhoneNumber('415-555-4242'))print('Moshi moshi is a phone number:')print(isPhoneNumber('Moshi moshi'))",
            "Latex": []
        },
        {
            "Title": "Regular Expressions",
            "Description": "The following Python code uses the previously defined `isPhoneNumber` function within a loop to search through a longer string for valid phone number formats. message = 'Call me at 415-555-1011 tomorrow. 415-555-9999 is my office.'for i in range(len(message)):    chunk = message[i:i+12]    if isPhoneNumber(chunk):        print('Phone number found: ' + chunk)print('Done')",
            "Latex": []
        },
        {
            "Title": "Creating regex objects",
            "Description": "r' = raw string\\d - placeholder for a single digit>>> import re>>> phoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d')",
            "Latex": []
        },
        {
            "Title": "Matching regex objects",
            "Description": ">>> import re>>> phoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d')>>> mo = phoneNumRegex.search(\u2018My number is 415-555-4242.')>>> print(\u2018Phone number found: ' + mo.group())Phone number found: 415-555-4242 mo = match object - contains the result of our search",
            "Latex": []
        },
        {
            "Title": "Text Normalization",
            "Description": "-We will work a lot with large datasets / corpora\n-We often need to pre-process text\n-Tokenizing (segmenting) words\n-Normalizing word formats\n-Segmenting sentences (e.g. by using punctuation)",
            "Latex": []
        },
        {
            "Title": "Tokenization - segmenting running text into words (or word-like units)",
            "Description": ">>> text = 'That U.S.A. poster-print costs $12.40...'\n>>> pattern = r''', (?x)  # set flag to allow verbose regexps\n...     ([A-Z]\\.)+        # abbreviations, e.g. U.S.A....\n     | \\w+(-\\w+)*      # words with optional internal hyphens...\n     | \\$?\\d+(\\.\\d+)?%?  # currency and percentages, e.g. $12.40, 82%...\n     | \\...          # ellipsis...\n     | [][.,;\"'?():-_`]  # these are separate tokens; includes ], [... '''\n>>> nltk.regexp_tokenize(text, pattern)['That', 'U.S.A.', 'poster-print', 'costs', '$12.40', '...']",
            "Latex": []
        },
        {
            "Title": "Subword tokenization",
            "Description": "-How do we capture relations between words like:\n-new, newer\n-blow, blowing\n-precipitation, precipitate\n-Often useful to break tokens into *sub*words-Usually split into token learners, and token segmenters",
            "Latex": []
        },
        {
            "Title": "Byte-pair encoding (BPE)",
            "Description": "-A way of performing subword tokenizationfunction BYTE-PAIR ENCODING(strings C, number of merges k) returns vocab VV <- all unique characters in C                  # initial set of tokens is charactersfor i = 1 to k do                                # merge tokens til k times    t_L, t_R <- Most frequent pair of adjacent tokens in C    t_new <- t_L + t_R                           # make new token by concatenating    V <- V + t_new                               # update the vocabulary    Replace each occurrence of t_L, t_R in C with t_new # and update the corpusreturn Vcorpus5 low_2 lowest_6 newer_3 wider_2 new_vocabulary_, d, e, i, l, n, o, r, s, t, wcorpus5 low _2 lowest _6 newer _3 wider _2 new _vocabulary_, d, e, i, l, n, o, r, s, t, w, er",
            "Latex": []
        },
        {
            "Title": "Word normalization",
            "Description": "-Case folding - e.g., making everything lowercase-Lemmatization - folding lemmas together if they have the same root (dinner / dinners, am / are / is, etc.). -Stemming - performing lemmatization by removing all but the roots of words (running / runner -> run)",
            "Latex": []
        },
        {
            "Title": "Minimum Edit Distance",
            "Description": "Definition of Minimum Edit Distance",
            "Latex": []
        },
        {
            "Title": "How similar are two strings?",
            "Description": "-Spell correction-The user typed 'graffe' Which is closest? -graf-graft-grail-giraffe-Computational Biology-Align two sequences of nucleotides-Resulting alignment:-Also for Machine Translation, Information Extraction, Speech RecognitionAGGCTATCACCTGACCTCCAGGCCGATGCCCTAGCTATCACGACCGCGGTCGATTTGCCCGAC-AGGCTATCACCTGACCTCCAGGCCGA--TGCCC---TAG-CTATCAC--GACCGC--GGTCGATTTGCCCGAC",
            "Latex": []
        },
        {
            "Title": "Edit Distance",
            "Description": "-The minimum edit distance between two strings-Is the minimum number of editing operations-Insertion-Deletion-Substitution-Needed to transform one into the other",
            "Latex": []
        },
        {
            "Title": "Minimum Edit Distance",
            "Description": "-Two strings and their alignment:INTENTION| | | | | | |*EXECUTION",
            "Latex": []
        },
        {
            "Title": "Minimum Edit Distance",
            "Description": "-If each operation has cost of 1-Distance between these is 5-If substitutions cost 2 (Levenshtein)-Distance between them is 8INTENTION| | | | | | |*EXECUTIONd s s   is s",
            "Latex": []
        },
        {
            "Title": "Alignment in Computational Biology",
            "Description": "-Given a sequence of bases-An alignment:-Given two sequences, align each letter to a letter or gap-AGGCTATCACCTGACCTCCAGGCCGA--TGCCC---TAG-CTATCAC--GACCGC--GGTCGATTTGCCCGAC",
            "Latex": []
        },
        {
            "Title": "Other uses of Edit Distance in NLP",
            "Description": "-Evaluating Machine Translation and speech recognitionR Spokesman confirms    senior government adviser was shotH Spokesman said    the senior            adviser was shot dead              S      I              D                        I-Named Entity Extraction and Entity Coreference-IBM Inc. announced today-IBM profits-Stanford President John Hennessy announced yesterday-for Stanford University President John Hennessy",
            "Latex": []
        },
        {
            "Title": "How to find the Min Edit Distance?",
            "Description": "-Searching for a path (sequence of edits) from the start string to the final string:-Initial state: the word we're transforming-Operators: insert, delete, substitute-Goal state:  the word we're trying to get to-Path cost: what we want to minimize: the number of edits37",
            "Latex": []
        },
        {
            "Title": "Minimum Edit as Search",
            "Description": "-But the space of all edit sequences is huge!-We can't afford to navigate na\u00efvely-Lots of distinct paths wind up at the same state.-We don't have to keep track of all of them-Just the shortest path to each of those revisted states.\n38",
            "Latex": []
        },
        {
            "Title": "Defining Min Edit Distance",
            "Description": "-For two strings-X of length n -Y of length m-We define D(i,j)-the edit distance between X[1..i] and Y[1..j] -i.e., the first i characters of X and the first j characters of Y-The edit distance between X and Y is thus D(n,m)",
            "Latex": []
        },
        {
            "Title": "Dynamic Programming for Minimum Edit Distance",
            "Description": "-Dynamic programming: A tabular computation of D(n,m)-Solving problems by combining solutions to subproblems.-Bottom-up-We compute D(i,j) for small i,j -And compute larger D(i,j) based on previously computed smaller values-i.e., compute D(i,j) for all i (0 < i < n)  and j (0 < j < m)",
            "Latex": []
        },
        {
            "Title": "Defining Min Edit Distance (Levenshtein)",
            "Description": "-InitializationD(i,0) = iD(0,j) = j-Recurrence Relation:For each  i = 1...M   For each  j = 1...N                       D(i-1,j) + 1          D(i,j)= min  D(i,j-1) + 1                       D(i-1,j-1) +   2; if X(i) \u2260 Y(j)                                         0; if X(i) = Y(j)-Termination:D(N,M) is distance ",
            "Latex": []
        },
        {
            "Title": "The Edit Distance Table",
            "Description": "The minimum edit distance between two strings is the minimum number of editing operations needed to transform one string into the other. The typical operations allowed are:1.Insertion (Ins): Add one character to the string.2.Deletion (Del): Remove one character from the string.3.Substitution (Sub): Replace one character with another.",
            "Latex": []
        },
        {
            "Title": "Computing alignments",
            "Description": "-Edit distance isn't sufficient-We often need to align each character of the two strings to each other-We do this by keeping a 'backtrace'-Every time we enter a cell, remember where we came from-When we reach the end, -Trace back the path from the upper right corner to read off the alignment",
            "Latex": []
        },
        {
            "Title": "MinEdit with Backtrace",
            "Description": "",
            "Latex": []
        },
        {
            "Title": "Adding Backtrace to Minimum Edit Distance",
            "Description": "-Base conditions:                                                        Termination:D(i,0) = i         D(0,j) = j         D(N,M) is distance -Recurrence Relation:For each  i = 1...M  For each  j = 1...N                      D(i-1,j) + 1         D(i,j)= min  D(i,j-1) + 1                      D(i-1,j-1) +  2; if X(i) \u2260 Y(j)                                       0; if X(i) = Y(j)                     LEFT         ptr(i,j)=   DOWN                     DIAGinsertiondeletionsubstitutioninsertiondeletionsubstitution",
            "Latex": []
        },
        {
            "Title": "The Distance Matrix",
            "Description": "Every non-decreasing path from (0,0) to (M, N) corresponds to an alignment of the two sequencesAn optimal alignment is composed of optimal subalignments",
            "Latex": []
        },
        {
            "Title": "Result of Backtrace",
            "Description": "-Two strings and their alignment:INTENTION| | | | | | |*EXECUTION",
            "Latex": []
        },
        {
            "Title": "Performance",
            "Description": "-Time:    O(nm)-Space:    O(nm)-Backtrace    O(n+m)",
            "Latex": []
        },
        {
            "Title": "Hearst Patterns for Hypernymy",
            "Description": "-Hyponym - 'Is-A' relationship-Hypernym - Opposite of hypernym-Color is a hypernym of red; cat is a hypernym of white cat. -A rule-based way of detecting hypernym relationships in text is through Hearst patterns",
            "Latex": []
        },
        {
            "Title": "Some Hearst Patterns",
            "Description": "-All bolded symbols (a, b, ...) are noun phrases-Type 1 - Extract (b,a)-'a is b'-'a is a type of b'-'a is a kind of b'-'a was b'-'a was a type of b'-'a was a kind of b'-'a are b'-'a are a type of b'-'a are a kind of b'-Type 2 - Extract (a,b), (a,c), ..., (a,d)-'a, including b'-'a, including b, c, ..., and d '-'a, including b, c, ..., or d'-'a, such as b'-'a, such as b, c, ..., and d'-'a, such as b, c, ..., or d'-There are many others!",
            "Latex": []
        }
    ]
}